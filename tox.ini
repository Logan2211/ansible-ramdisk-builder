[tox]
minversion = 2.0
skipsdist = True
envlist = linters,functional_2.6,functional_stable,functional_stable_py3


[testenv]
usedevelop = True
install_command =
    pip install -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt} {opts} {packages}
deps =
    -r{toxinidir}/test-requirements.txt
commands =
    /usr/bin/find . -type f -name "*.pyc" -delete
passenv =
    HOME
    http_proxy
    HTTP_PROXY
    https_proxy
    HTTPS_PROXY
    no_proxy
    NO_PROXY
    ANSIBLE_FORCE_COLOR
    docker_image
    docker_image_tag
    docker_command
    ansible_inventory
whitelist_externals =
    bash
    git
    rm
    wget
setenv =
    VIRTUAL_ENV={envdir}


[testenv:docs]
commands=
    bash -c "rm -rf doc/build"
    doc8 doc
    python setup.py build_sphinx


[doc8]
# Settings for doc8:
extensions = .rst


# environment used by the -infra templated docs job
[testenv:venv]
# NOTE(jaegerandi): this target does not use constraints because
# upstream infra does not yet support it. Once that's fixed, we can
# drop the install_command.
install_command =
    pip install -U {opts} {packages}
commands =
    {posargs}


[testenv:pep8]
commands =
    # Run hacking/flake8 check for all python files
    bash -c "grep --recursive --binary-files=without-match \
        --files-with-match '^.!.*python$' \
        --exclude-dir .eggs \
        --exclude-dir .git \
        --exclude-dir .tox \
        --exclude-dir *.egg-info \
        --exclude-dir doc \
        {toxinidir} | xargs flake8 --verbose"


[flake8]
# Ignores the following rules due to how ansible modules work in general
#     F403 'from ansible.module_utils.basic import *' used;
#          unable to detect undefined names
#     H303 No wildcard (*) import.
ignore=F403,H303


[testenv:bashate]
commands =
    # Run bashate check for all bash scripts
    # Ignores the following rules:
    #     E003: Indent not multiple of 4 (we prefer to use multiples of 2)
    #     E006: Line longer than 79 columns (as many scripts use jinja
    #           templating, this is very difficult)
    #     E040: Syntax error determined using `bash -n` (as many scripts
    #           use jinja templating, this will often fail and the syntax
    #           error will be discovered in execution anyway)
    bash -c "grep --recursive --binary-files=without-match \
        --files-with-match '^.!.*\(ba\)\?sh$' \
        --exclude-dir .tox \
        --exclude-dir .git \
        {toxinidir} | xargs bashate --error . --verbose --ignore=E003,E006,E040"


[testenv:ansible]
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}
    ANSIBLE_HOST_KEY_CHECKING = False
    ANSIBLE_SSH_CONTROL_PATH = /tmp/%%h-%%r
    # This is required as the default is '/etc/ansible/roles' or a path
    # specified in ansible.cfg
    ANSIBLE_ROLES_PATH = {toxinidir}/roles:{toxinidir}/ephemeral_roles:{homedir}/.ansible/roles
commands =
    # none

[testenv:ansible_2.6]
deps =
    {[testenv:ansible]deps}
    ansible<2.7,>=2.6
setenv =
    {[testenv:ansible]setenv}
    PLUGINS_BRANCH = master
commands =
    {[testenv:ansible]commands}


[testenv:ansible_stable]
deps =
    {[testenv:ansible]deps}
    ansible!=2.9.10
setenv =
    {[testenv:ansible]setenv}
commands =
    {[testenv:ansible]commands}


[testenv:ansible-syntax]
deps =
    {[testenv:ansible_stable]deps}
setenv =
    {[testenv:ansible_stable]setenv}
commands =
    {[testenv:ansible_stable]commands}
    ansible-playbook {toxinidir}/get-ansible-role-requirements.yml
    ansible-playbook -i {toxinidir}/tests/{env:ansible_inventory} \
                     --syntax-check \
                     --list-tasks \
                     -e "rolename={toxinidir}" \
                     {toxinidir}/tests/test.yml


[testenv:ansible-lint]
deps =
    {[testenv:ansible_stable]deps}
    ansible-lint
commands =
    ansible-lint {toxinidir}


[testenv:functional_base]
install_command =
   pip install -U {opts} {packages}
deps =
   {[testenv:ansible_stable]deps}
setenv =
   {[testenv:ansible_stable]setenv}
commands =
   ansible-playbook {toxinidir}/get-ansible-role-requirements.yml
   ansible-playbook -i {toxinidir}/tests/{env:ansible_inventory} \
                    {toxinidir}/tests/test.yml


[testenv:functional_2.6]
install_command =
   {[testenv:functional_base]install_command}
deps =
   {[testenv:ansible_2.6]deps}
setenv =
   {[testenv:ansible_2.6]setenv}
commands =
   {[testenv:ansible_2.6]commands}
   {[testenv:functional_base]commands}


[testenv:functional_stable]
install_command =
   {[testenv:functional_base]install_command}
deps =
   {[testenv:ansible_stable]deps}
setenv =
   {[testenv:ansible_stable]setenv}
commands =
   {[testenv:ansible_stable]commands}
   {[testenv:functional_base]commands}


[testenv:functional_stable_py3]
basepython = python3
install_command =
   {[testenv:functional_base]install_command}
deps =
   {[testenv:ansible_stable]deps}
setenv =
   {[testenv:ansible_stable]setenv}
commands =
   {[testenv:ansible_stable]commands}
   {[testenv:functional_base]commands}


[testenv:linters]
deps =
    {[testenv:ansible_stable]deps}
setenv =
    {[testenv:ansible_stable]setenv}
commands =
    {[testenv:pep8]commands}
    {[testenv:bashate]commands}
    {[testenv:ansible-lint]commands}
    {[testenv:ansible-syntax]commands}
